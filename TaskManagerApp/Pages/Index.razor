@page "/"

<PageTitle>Task Manager App</PageTitle>

<div class="row">
    <form class="col-6">
        <div class="input-group">
            <label class="input-group-text">Task</label>
            <input @bind="_TaskContent" class="form-control"/>
            <button type="button" @onclick="Save" class="btn btn-outline-primary">Save</button>
        </div>
        @if(!string.IsNullOrEmpty(ErrorMessage)){
            <div class="alert alert-danger mt-1">@ErrorMessage</div>      
        }

    </form>
</div>
@if(ShowConfirmDeleteOption){
<div class="row mt-3">
    <div class="col-6">
        <div class="alert alert-danger">
            Are you sure you want to delete this task?
            <div>@_Task.TaskContent</div>
            <div class="text-end">
                <button @onclick="() => CancelDeletion()" class="btn btn-secondary">No</button>
                <button @onclick="() => Delete(_Task)" class="btn btn-danger">Yes</button>
            </div>
        </div>
    </div>
</div>
}
<div class="row my-3">
    <div class="col-6">
        <ul class="list-group">
            @foreach (var task in Tasks)
            {
                <li class="list-group-item">
                    <button @onclick="() => ConfirmDelete(task)" class="btn btn-danger btn-sm">Delete</button>
                    <button @onclick="() => Edit(task)" class="btn btn-primary btn-sm">Edit</button>
                    <button @onclick="() => Done(task)" class="btn btn-success btn-sm">Done</button>
                    <span style="text-decoration: @(task.IsDone ? "line-through": "none")">@task.TaskContent</span>
                </li>
            }
        </ul>
    </div>
</div>
@code{
    private bool ShowConfirmDeleteOption = false;
    private string ErrorMessage;
    private string _TaskContent;
    private Task? _Task = null;
    private List<Task> Tasks = new List<Task>();

    private void Save()
    {
        if (string.IsNullOrWhiteSpace(_TaskContent)){
            ErrorMessage = "Task must not be empty.";
            return;
        }

        if(_Task is null){
            var task = new Task { TaskContent = _TaskContent };
            Tasks.Add(task);
        }
        else{
            _Task.TaskContent = _TaskContent;
            _Task = null;
        }
        _TaskContent = string.Empty;
        ErrorMessage = string.Empty;
    }

    private void Done(Task task)
    {
        task.IsDone = !task.IsDone;
    }

    private void Edit(Task task)
    {
        ErrorMessage = string.Empty;
        _Task = task;
        _TaskContent = task.TaskContent;
    }

    private void ConfirmDelete(Task task)
    {
        _Task = task;
        ShowConfirmDeleteOption = true;
    }

    private void Delete(Task task)
    {
        Tasks.Remove(task);
        ShowConfirmDeleteOption = false;
        _Task = null;
    }

    private void CancelDeletion()
    {
        ShowConfirmDeleteOption = false;
        _Task = null;
    }

    class Task
    {
        public string TaskContent { get; set; }
        public bool IsDone { get; set; }
    }
}